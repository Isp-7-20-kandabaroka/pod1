from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import InputFile
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
TOKEN = "6855767476:AAGB9oVSxHlFe0-2uli8ITEDF-xHHn1Fekg"
bot = Bot(token=TOKEN)
storage = MemoryStorage()  # creating a MemoryStorage for FSM
dp = Dispatcher(bot, storage=storage)  # Now assigning the storage to Dispatcher


ADMIN_IDS = [448076215, 5100515110, 6165219675, 713476634]
CHANNELS = {
    '-1001735601596': 'https://t.me/mirchinivizov', # –í–º–µ—Å—Ç–æ ID –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª

}


def make_subscription_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞
    subscribe_bot_button = InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ—Ç–∞ üìù',
                                                url='https://t.me/OneGoroskope_bot')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É
    keyboard.add(subscribe_bot_button)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
    for channel_id, url in CHANNELS.items():
        button = InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª üìù', url=url)
        keyboard.add(button)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    check_button = InlineKeyboardButton('üíñ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è(–∞—Å—å)', callback_data='check_subs')
    keyboard.add(check_button)

    return keyboard




@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    start_keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton('üé•–í—Å–µ —Ñ–∏–ª—å–º—ã –∏–∑ –¢–∏–∫–¢–æ–∫–∞üé•', callback_data='check_channels')
    )

    photo_path = 'tiktok.jpg'  # –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ –≤–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ
    photo = InputFile(path_or_bytesio=photo_path)

    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo,
        caption="ü•§–í—Å–µ —Ñ–∏–ª—å–º—ã –∏–∑ –¢–∏–∫–¢–æ–∫–∞\n\n–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ ‚§µÔ∏è",
        reply_markup=start_keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'check_channels')
async def prompt_subscriptions(callback_query: types.CallbackQuery):
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    await callback_query.message.answer("üìù –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:", reply_markup=make_subscription_keyboard())

@dp.callback_query_handler(lambda c: c.data == 'check_subs')
async def process_check_subscription(callback_query: types.CallbackQuery):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_subscribed = True
    for channel_id in CHANNELS:
        chat_member = await bot.get_chat_member(channel_id, callback_query.from_user.id)
        if chat_member.status not in ['member', 'administrator', 'creator']:
            user_subscribed = False
            break

    if user_subscribed:
        await callback_query.message.answer("–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç!\n–í—Å–µ —Ñ–∏–ª—å–º—ã –∏–∑ –¢–∏–∫–¢–æ–∫–∞‚§µÔ∏è: https://t.me/KinoAgent_007Insta")

    else:
        # –≠—Ç–∞ —á–∞—Å—Ç—å —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        subscription_keyboard = make_subscription_keyboard()
        check_button = InlineKeyboardButton('‚ù§ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è(–∞—Å—å)', callback_data='check_subs')
        subscription_keyboard.add(check_button)
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å.", reply_markup=subscription_keyboard)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    await bot.answer_callback_query(callback_query.id)

# –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∫–æ–¥–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
class AdditionProcess(StatesGroup):
    waiting_for_channel_id = State()
    waiting_for_channel_url = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
@dp.message_handler(commands=['addchannel'], state='*')
async def add_channel_start(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–Ω–∏–º –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if message.from_user.id not in ADMIN_IDS:
        return await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞:")
    await AdditionProcess.waiting_for_channel_id.set()


@dp.message_handler(state=AdditionProcess.waiting_for_channel_id)
async def add_channel_id(message: types.Message, state: FSMContext):
    # –∑–¥–µ—Å—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ ID –∫–∞–Ω–∞–ª–∞ –≤–∞–ª–∏–¥–µ–Ω
    async with state.proxy() as data:
        data['channel_id'] = message.text
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:")
    await AdditionProcess.waiting_for_channel_url.set()


@dp.message_handler(state=AdditionProcess.waiting_for_channel_url)
async def add_channel_url(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['channel_url'] = message.text
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ –Ω–∞—à —Å–ª–æ–≤–∞—Ä—å (–≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –µ–≥–æ –≤ –ë–î –∏–ª–∏ —Ñ–∞–π–ª)
        CHANNELS[data['channel_id']] = data['channel_url']

    await message.answer("–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.finish()
class DeletionProcess(StatesGroup):
    waiting_for_channel_id_to_delete = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∞–¥–º–∏–Ω–æ–º
@dp.message_handler(commands=['delchannel'], state='*')
async def del_channel_start(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–Ω–∏–º –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await DeletionProcess.waiting_for_channel_id_to_delete.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.message_handler(state=DeletionProcess.waiting_for_channel_id_to_delete)
async def del_channel_id(message: types.Message, state: FSMContext):
    channel_id_to_delete = message.text.strip()

    if channel_id_to_delete in CHANNELS:
        del CHANNELS[channel_id_to_delete]  # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        await message.answer("–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫.")
    else:
        await message.answer("–ö–∞–Ω–∞–ª–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫.")

    await state.finish()

# –î–æ–±–∞–≤–ª—è–µ–º LoggingMiddleware —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤ –ª–æ–≥–∞—Ö –±–æ—Ç–∞
dp.middleware.setup(LoggingMiddleware())
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
