
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage

TOKEN = "6882073553:AAHRPI4Ii5El8--oXskqD6XbQJ0IwPNscPM"
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


ADMIN_IDS = [448076215, 6165219675, 713476634]
CHANNELS = {
    '-1001735601596': {
        'url': 'https://t.me/pokupka_na_vb',
        'order': 2,
        'bot_members': {}
    },
    # –î—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã
}

next_channel_order = 2

user_subscription_checks = {}

def make_subscription_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)

    subscribe_bot_button = InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª 1 üìù', url='https://t.me/OneGoroskope_bot')
    keyboard.add(subscribe_bot_button)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ –∏—Ö –ø–æ—Ä—è–¥–∫—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∏—Ö –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    sorted_channels = sorted(CHANNELS.items(), key=lambda item: item[1]['order'])
    for channel_id, details in sorted_channels:
        button = InlineKeyboardButton(f'–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª {details["order"]} üìù', url=details['url'],
                                      callback_data=f'subscribe_channel_{channel_id}')
        keyboard.add(button)

    check_button = InlineKeyboardButton('üíñ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è(–∞—Å—å)', callback_data='check_subs')
    keyboard.add(check_button)

    return keyboard

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    username = message.from_user.first_name
    welcome_text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username} ‚ù§Ô∏è" if username else "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
    await bot.send_message(chat_id=message.chat.id, text=welcome_text)
    start_keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton('üé•–í—Å–µ —Ñ–∏–ª—å–º—ã –∏–∑ –¢–∏–∫–¢–æ–∫–∞üé•', callback_data='check_channels')
    )

    photo_path = 'tiktok.jpg'
    photo = InputFile(path_or_bytesio=photo_path)

    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo,
        caption="ü•§–í—Å–µ —Ñ–∏–ª—å–º—ã –∏–∑ –¢–∏–∫–¢–æ–∫–∞\n\n–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ ‚§µÔ∏è",
        reply_markup=start_keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'check_channels')
async def prompt_subscriptions(callback_query: types.CallbackQuery):
    await callback_query.message.answer("üìù –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:",
                                        reply_markup=make_subscription_keyboard())

@dp.callback_query_handler(lambda c: c.data == 'check_subs')
async def process_check_subscription(callback_query: types.CallbackQuery):
    global next_channel_order

    if callback_query.from_user.id not in user_subscription_checks:
        user_subscription_checks[callback_query.from_user.id] = 0

    user_subscribed = True
    not_subscribed_channels = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω

    for channel_id, details in CHANNELS.items():
        chat_member = await bot.get_chat_member(channel_id, callback_query.from_user.id)
        if chat_member.status not in ['member', 'administrator', 'creator']:
            user_subscribed = False
            not_subscribed_channels.append(details['url'])  # –î–æ–±–∞–≤–ª—è–µ–º URL –∫–∞–Ω–∞–ª–∞ –≤ —Å–ø–∏—Å–æ–∫

    total_channels = len(CHANNELS)  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤

    if user_subscribed:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –∫ –µ–≥–æ —Å—á–µ—Ç—á–∏–∫—É
        user_subscription_checks[callback_query.from_user.id] += total_channels
        await callback_query.message.answer("–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç!\n–í—Å–µ —Ñ–∏–ª—å–º—ã –∏–∑ –¢–∏–∫–¢–æ–∫–∞‚§µÔ∏è: https://t.me/kinoAgent_007")
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        warning_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å:\n" + "\n".join(not_subscribed_channels)
        await callback_query.message.answer(warning_message, reply_markup=make_subscription_keyboard())

    await bot.answer_callback_query(callback_query.id)

class AdditionProcess(StatesGroup):
    waiting_for_channel_id = State()  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç ID –∫–∞–Ω–∞–ª–∞
    waiting_for_channel_url = State()  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç URL –∫–∞–Ω–∞–ª–∞

@dp.message_handler(commands=['addchannel'], state='*')
async def add_channel_start(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    await AdditionProcess.waiting_for_channel_id.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞:")

@dp.message_handler(state=AdditionProcess.waiting_for_channel_id)
async def add_channel_id(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['channel_id'] = message.text.strip()
    await AdditionProcess.next()  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await message.answer("–í–≤–µ–¥–∏—Ç–µ URL –∫–∞–Ω–∞–ª–∞:")


@dp.message_handler(state=AdditionProcess.waiting_for_channel_url)
async def add_channel_url(message: types.Message, state: FSMContext):
    global next_channel_order
    async with state.proxy() as data:
        data['channel_url'] = message.text

    # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π order —Å—Ä–µ–¥–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º next_channel_order –Ω–∞ –æ–¥–∏–Ω –±–æ–ª—å—à–µ
    if CHANNELS:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç –ª–∏ —Å–ª–æ–≤–∞—Ä—å
        max_order = max(channel['order'] for channel in CHANNELS.values())
        next_channel_order = max_order + 1
    else:  # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª–æ–≤ –µ—â—ë –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ
        next_channel_order = 1

    channel_id = data['channel_id']
    CHANNELS[channel_id] = {
        'url': data['channel_url'],
        'order': next_channel_order,
        'bot_members': {}
    }
    # –¢–µ–ø–µ—Ä—å –Ω–µ –Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å next_channel_order, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã—à–µ
    await message.answer(f"–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {CHANNELS[channel_id]['order']}!")
    await state.finish()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è

class DeletionProcess(StatesGroup):
    waiting_for_channel_id_to_delete = State()

@dp.message_handler(commands=['delchannel'], state='*')
async def delete_channel_start(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–Ω–∏–º –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if message.from_user.id not in ADMIN_IDS:
        return await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ:")
    await DeletionProcess.waiting_for_channel_id_to_delete.set()
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∞–¥–º–∏–Ω–æ–º


@dp.message_handler(state=DeletionProcess.waiting_for_channel_id_to_delete)
async def del_channel_id(message: types.Message, state: FSMContext):
    global CHANNELS, next_channel_order  # –î–æ–±–∞–≤–ª—è–µ–º next_channel_order –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç

    channel_id_to_delete = message.text.strip()

    if channel_id_to_delete in CHANNELS:
        removed_channel_order = CHANNELS[channel_id_to_delete]['order']
        del CHANNELS[channel_id_to_delete]

        # –£–º–µ–Ω—å—à–∞–µ–º `order` –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤.
        for channel_id, channel_info in CHANNELS.items():
            if channel_info['order'] > removed_channel_order:
                channel_info['order'] -= 1

        # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ `order`, –µ—Å–ª–∏ —É–¥–∞–ª—è–µ–º—ã–π –∫–∞–Ω–∞–ª –Ω–µ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º
        if removed_channel_order <= next_channel_order:
            next_channel_order -= 1

        await message.answer("–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫.")
    else:
        await message.answer("–ö–∞–Ω–∞–ª–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫.")

    await state.finish()
 # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
@dp.message_handler(commands=['stat'])
async def show_stats(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–Ω–∏–º –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if message.from_user.id not in ADMIN_IDS:
        return await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    total_subscribers = sum(user_subscription_checks.values())
    await message.answer(f"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ—Ç –±–æ—Ç–∞: + {total_subscribers}")



async def on_startup(dp):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MemoryStorage –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
    dp.middleware.setup(LoggingMiddleware())



if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π on_startup
    executor.start_polling(dp, on_startup=on_startup, on_shutdown=None)

if __name__ == '__main__':
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    dp.middleware.setup(LoggingMiddleware())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π on_startup
    executor.start_polling(dp, on_startup=on_startup, on_shutdown=None)
